What happens when you initialize a repository? Why do you need to do it?

	When you initialize a repository, you create a .git file in that directory which can now track the history of the files and folders that are add to the repository throught git commit command.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area is where the files that are to be committed are added and held, before they are actually committedto the repository. The value in this is that any file not committed yet can be reset, or removed, allowing flexibility for changes.

How can you use the staging area to make sure you have one commit per logical
change?

	Using the git diff command to see what changes have been that have not been added, is a good way to verify you have one commit per logical change.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Branches will be helpful when I want to create different versions of my app with different features witout overwriting the current working app!

How do the diagrams help you visualize the branch structure?

	The diagrams help to visually observe the structure of the repository with all the different branches, their commit history, and commit reachability.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	Merging two branches results in a new commit that has access to all the previous commits of both branches.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

	One advantage of Git's automatic merging is that it intuitively combines code to add features without breaking or taking away already existing features. Occasionally, manually merging needs to take place instead because two different codes may have been created to address one issue and only one can be kept. Trying to decide this automatically could lead to errors and confusing behavior from the code.  